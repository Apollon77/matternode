/**
 * Copyright 2022 Project CHIP Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  https://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const SRC = '../../src/'

const path = require('path')
const assert = require('assert')
const Certificate = require(SRC+'crypto/Certificate')
const CertificateTlv = require(SRC+'crypto/CertificateTlv')
const logger = require(SRC+'util/Logger')

const theTestCertTlvVector = [

    {
        name: 'SDK NOC Example',
        key: 'A565B3FA28A8ED6A74FB6F0FF8A4D340D9E1AE98F21DFA1F0A59A4EA021A1627',
        certTlv: '153001083efcff1702b9a17a2402013703271303000000cacacaca182604ef171b2726056eb5b94c3706271101000100dededede27151d0000000000b0fa18240701240801300941049a2a216fb39dd6b6fa211b835c89e3e6afb66c14f75831954f9ff4f7a3f0112c8a0d8eaf29c653294d48eee0708a032cca39393c3a7b46f181aea078fead8383370a3501280118240201360304020401183004149f55a26b7e4303e60883e913bf94f4fb5e2a61613005145352d7059e9c15a508906862864801a29f1f41d318300b407955c202630b4ba4d5912526322fdf28f89edfe5af9c0e572bd8a14aaabb4d12b83ca17c7b05fb164b77d79c529613316bcfd17895e4b2a4f2404b981732715918',
        der: '308201e030820186a00302010202083efcff1702b9a17a300a06082a8648ce3d04030230223120301e060a2b0601040182a27c01030c1043414341434143413030303030303033301e170d3230313031353134323334335a170d3430313031353134323334325a30443120301e060a2b0601040182a27c01010c10444544454445444530303031303030313120301e060a2b0601040182a27c01050c10464142303030303030303030303031443059301306072a8648ce3d020106082a8648ce3d030107034200049a2a216fb39dd6b6fa211b835c89e3e6afb66c14f75831954f9ff4f7a3f0112c8a0d8eaf29c653294d48eee0708a032cca39393c3a7b46f181aea078fead8383a38183308180300c0603551d130101ff04023000300e0603551d0f0101ff04040302078030200603551d250101ff0416301406082b0601050507030206082b06010505070301301d0603551d0e041604149f55a26b7e4303e60883e913bf94f4fb5e2a6161301f0603551d230418301680145352d7059e9c15a508906862864801a29f1f41d3300a06082a8648ce3d040302034800304502207955c202630b4ba4d5912526322fdf28f89edfe5af9c0e572bd8a14aaabb4d12022100b83ca17c7b05fb164b77d79c529613316bcfd17895e4b2a4f2404b9817327159',
        b64Der: 'MIIB4DCCAYagAwIBAgIIPvz/FwK5oXowCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQBgqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDMwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMTEgMB4GCisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASaKiFvs53WtvohG4NciePmr7ZsFPdYMZVPn/T3o/ARLIoNjq8pxlMpTUju4HCKAyzKOTk8OntG8YGuoHj+rYODo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgeAMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUn1Wia35DA+YIg+kTv5T0+14qYWEwHwYDVR0jBBgwFoAUU1LXBZ6cFaUIkGhihkgBop8fQdMwCgYIKoZIzj0EAwIDSAAwRQIgeVXCAmMLS6TVkSUmMi/fKPie3+WvnA5XK9ihSqq7TRICIQC4PKF8ewX7Fkt315xSlhMxa8/ReJXksqTyQEuYFzJxWQ==',
        b64Chip: 'FTABCD78/xcCuaF6JAIBNwMnEwMAAADKysrKGCYE7xcbJyYFbrW5TDcGJxEBAAEA3t7e3icVHQAAAAAAsPoYJAcBJAgBMAlBBJoqIW+znda2+iEbg1yJ4+avtmwU91gxlU+f9Pej8BEsig2OrynGUylNSO7gcIoDLMo5OTw6e0bxga6geP6tg4M3CjUBKAEYJAIBNgMEAgQBGDAEFJ9Vomt+QwPmCIPpE7+U9PteKmFhMAUUU1LXBZ6cFaUIkGhihkgBop8fQdMYMAtAeVXCAmMLS6TVkSUmMi/fKPie3+WvnA5XK9ihSqq7TRK4PKF8ewX7Fkt315xSlhMxa8/ReJXksqTyQEuYFzJxWRg=',
        rootCa:
`-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIIWeqmMpR/VBwwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBBAwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABBNTo7PvHacIxJCASAFOQH1ZkM4ivE6zPppa
yyWoVgPrptzYITZmpORPWsoT63Z/r6fc3dwzQR+CowtUPdHSS6ijYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBQTr4GrNzdLLtKp
ZJsSt6OkKH4VHTAfBgNVHSMEGDAWgBQTr4GrNzdLLtKpZJsSt6OkKH4VHTAKBggq
hkjOPQQDAgNIADBFAiBFgWRGbI8ZWrwKu3xstaJ6g/QdN/jVO+7FIKvSoNoFCQIh
ALinwlwELjDPZNww/jNOEgAZZk5RUEkTT1eBI4RE/HUx
-----END CERTIFICATE-----`,
        signCa:
`-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIILbREhVZBrt8wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwMzBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABMXQhhu4+QxAXBIxTkxevuqTn3J3S8wzI54v
Wfb0avjcfUaCoOPMxkbm3ynqhr9WKucgqJgzfTg/MsCgnkFgGeqjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRTUtcFnpwVpQiQ
aGKGSAGinx9B0zAfBgNVHSMEGDAWgBQTr4GrNzdLLtKpZJsSt6OkKH4VHTAKBggq
hkjOPQQDAgNIADBFAiEAhBoG1Dten+zSToexJE61HGos8g2bXmugfxHmAC9+DKMC
IE4ypgLDYJ0AktNIvb0ZihFGRr1BzxA3g2Qa4l4/I/0m
-----END CERTIFICATE-----`,
        pem: 
`-----BEGIN CERTIFICATE-----
MIIB4DCCAYagAwIBAgIIPvz/FwK5oXowCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDMwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMTEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAASaKiFvs53WtvohG4NciePmr7ZsFPdYMZVPn/T3o/ARLIoNjq8pxlMp
TUju4HCKAyzKOTk8OntG8YGuoHj+rYODo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgeAMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUn1Wia35DA+YIg+kTv5T0+14qYWEwHwYDVR0jBBgwFoAUU1LXBZ6c
FaUIkGhihkgBop8fQdMwCgYIKoZIzj0EAwIDSAAwRQIgeVXCAmMLS6TVkSUmMi/f
KPie3+WvnA5XK9ihSqq7TRICIQC4PKF8ewX7Fkt315xSlhMxa8/ReJXksqTyQEuY
FzJxWQ==
-----END CERTIFICATE-----`
    },
    /*
    {
        name: 'SDK Root CA Example',
        key: 'A565B3FA28A8ED6A74FB6F0FF8A4D340D9E1AE98F21DFA1F0A59A4EA021A1627',
        certTlv: '1530010859eaa632947f541c2402013703271401000000cacacaca182604ef171b2726056eb5b94c3706271401000000cacacaca18240701240801300941041353a3b3ef1da708c4908048014e407d5990ce22bc4eb33e9a5acb25a85603eba6dcd8213666a4e44f5aca13eb767fafa7dcdddc33411f82a30b543dd1d24ba8370a350129011824026030041413af81ab37374b2ed2a9649b12b7a3a4287e151d30051413af81ab37374b2ed2a9649b12b7a3a4287e151d18300b40458164466c8f195abc0abb7c6cb5a27a83f41d37f8d53beec520abd2a0da0509b8a7c25c042e30cf64dc30fe334e120019664e515049134f5781238444fc753118',
        der: '308201e030820186a00302010202083efcff1702b9a17a300a06082a8648ce3d04030230223120301e060a2b0601040182a27c01030c1043414341434143413030303030303033301e170d3230313031353134323334335a170d3430313031353134323334325a30443120301e060a2b0601040182a27c01010c10444544454445444530303031303030313120301e060a2b0601040182a27c01050c10464142303030303030303030303031443059301306072a8648ce3d020106082a8648ce3d030107034200049a2a216fb39dd6b6fa211b835c89e3e6afb66c14f75831954f9ff4f7a3f0112c8a0d8eaf29c653294d48eee0708a032cca39393c3a7b46f181aea078fead8383a38183308180300c0603551d130101ff04023000300e0603551d0f0101ff04040302078030200603551d250101ff0416301406082b0601050507030206082b06010505070301301d0603551d0e041604149f55a26b7e4303e60883e913bf94f4fb5e2a6161301f0603551d230418301680145352d7059e9c15a508906862864801a29f1f41d3300a06082a8648ce3d040302034800304502207955c202630b4ba4d5912526322fdf28f89edfe5af9c0e572bd8a14aaabb4d12022100b83ca17c7b05fb164b77d79c529613316bcfd17895e4b2a4f2404b9817327159',
        b64Der: 'MIIB4DCCAYagAwIBAgIIPvz/FwK5oXowCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQBgqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDMwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMTEgMB4GCisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASaKiFvs53WtvohG4NciePmr7ZsFPdYMZVPn/T3o/ARLIoNjq8pxlMpTUju4HCKAyzKOTk8OntG8YGuoHj+rYODo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgeAMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUn1Wia35DA+YIg+kTv5T0+14qYWEwHwYDVR0jBBgwFoAUU1LXBZ6cFaUIkGhihkgBop8fQdMwCgYIKoZIzj0EAwIDSAAwRQIgeVXCAmMLS6TVkSUmMi/fKPie3+WvnA5XK9ihSqq7TRICIQC4PKF8ewX7Fkt315xSlhMxa8/ReJXksqTyQEuYFzJxWQ==',
        b64Chip: 'FTABCD78/xcCuaF6JAIBNwMnEwMAAADKysrKGCYE7xcbJyYFbrW5TDcGJxEBAAEA3t7e3icVHQAAAAAAsPoYJAcBJAgBMAlBBJoqIW+znda2+iEbg1yJ4+avtmwU91gxlU+f9Pej8BEsig2OrynGUylNSO7gcIoDLMo5OTw6e0bxga6geP6tg4M3CjUBKAEYJAIBNgMEAgQBGDAEFJ9Vomt+QwPmCIPpE7+U9PteKmFhMAUUU1LXBZ6cFaUIkGhihkgBop8fQdMYMAtAeVXCAmMLS6TVkSUmMi/fKPie3+WvnA5XK9ihSqq7TRK4PKF8ewX7Fkt315xSlhMxa8/ReJXksqTyQEuYFzJxWRg=',
        pem:
`-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIIWeqmMpR/VBwwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBBAwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABBNTo7PvHacIxJCASAFOQH1ZkM4ivE6zPppa
yyWoVgPrptzYITZmpORPWsoT63Z/r6fc3dwzQR+CowtUPdHSS6ijYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBQTr4GrNzdLLtKp
ZJsSt6OkKH4VHTAfBgNVHSMEGDAWgBQTr4GrNzdLLtKpZJsSt6OkKH4VHTAKBggq
hkjOPQQDAgNIADBFAiBFgWRGbI8ZWrwKu3xstaJ6g/QdN/jVO+7FIKvSoNoFCQIh
ALinwlwELjDPZNww/jNOEgAZZk5RUEkTT1eBI4RE/HUx
-----END CERTIFICATE-----`,
    },
    */
]

function testCertVerify(testEntry)
{
    const ca = Certificate.fromPem(testEntry.signCa)
    const cert = Certificate.fromPem(testEntry.pem)
    
    it("Test Certificate Verify -- "+testEntry.name, async function () {

        const ok = await cert.verify({
            publicKey: ca,
            signatureOnly: true,
        }, Certificate.WebCrypto)
        assert.strictEqual(ok, true)
    })
}

function testCertTlvDecode(testEntry)
{
    var cert

    it("Test CertificateTlv Decode -- "+testEntry.name, async function () {
        const nocTlv = Buffer.from(testEntry.certTlv, 'hex')
        const nocCertReader = new CertificateTlv(nocTlv)
        cert = await nocCertReader.decode()
        assert.ok(cert != null && cert != undefined)  // cert?
    })

    it("Test CertificateTlv to PEM -- "+testEntry.name, async function () {
        const nocPem = cert.toString("pem")
        logger.trace('PEM: '+nocPem)
        assert.equal(nocPem,testEntry.pem)
    })

    it("Test CertificateTlv to DER -- "+testEntry.name, async function () {
        const nocDer = cert.toString("hex")
        logger.trace('DER HEX: '+nocDer)
        assert.equal(nocDer,testEntry.der)
    })

    it("Test CertificateTlv to B64 -- "+testEntry.name, async function () {
        const nocDerBase64 = cert.toString("base64")
        logger.trace('DER B64: '+nocDerBase64)
        assert.equal(nocDerBase64,testEntry.b64Der)
    })

    it("Test CertificateTlv Verify -- "+testEntry.name, async function () {
        const ok = await cert.verify(
            {
                publicKey: Certificate.fromPem(testEntry.signCa),
                signatureOnly: true 
            }, 
            Certificate.WebCrypto)
        assert.strictEqual(ok, true)
    })

}

describe(path.basename(__filename), () => {
    theTestCertTlvVector.forEach(testEntry => {
        testCertVerify(testEntry)
        testCertTlvDecode(testEntry)
    })
})
